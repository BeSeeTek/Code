# CircleCI 2.1 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

executors:
  tester:
    docker:
      - image: circleci/python:3

workflows:
  build_and_test_virtual_environments:
    jobs:
      - build_and_test_conda_env
      - build_and_test_venv_env
  test_submodules:
    jobs:
      - test_PyDynamic
      - test_agentMET4FOF

jobs:
  build_and_test_conda_env:
    executor: tester

    working_directory: ~/repo

    steps:
      # Checkout code
      - checkout
      # Initialize submodules
      - run:
          name: Initialize submodules
          command: |
            git submodule sync PyDynamic agentMET4FOF
            git submodule update --init PyDynamic agentMET4FOF

      # Create folder for test results.
      - run:
          name: Create test result folder
          command: |
            mkdir test-reports

      # Install Miniconda.
      - run:
          name: Install Miniconda
          command: |
            wget "https://repo.anaconda.com/miniconda/\
            Miniconda3-latest-Linux-x86_64.sh" -O /home/circleci/miniconda.sh
            mkdir -p /home/circleci/.conda
            bash /home/circleci/miniconda.sh -b -p /home/circleci/conda
            echo 'export PATH=/home/circleci/conda/bin:$PATH' >> $BASH_ENV

      # Download and cache dependencies
      - restore_cache:
          keys:
            # Specify the unique identifier for the cache.
            - conda-dependencies-{{ checksum "environment.yml" }}
            # Fallback to using the latest cache if no exact match is found.
            - conda-dependencies-

      # Create environment.
      - run:
          name: Create environment
          command: |
            if [ -d "/home/circleci/conda/envs/" ]; then
                conda env update --prune --file environment.yml
            else
                conda update -n base -c defaults conda
                conda env create -f environment.yml
            fi

      - save_cache:
          paths:
            - /home/circleci/conda/envs/
          key: >-
            conda-dependencies-{{ checksum "environment.yml" }}

      # Run tests! We use pytest's test-runner.
      - run:
          name: Run tests
          command: |
            source activate Met4FoF_Code
            pytest -v --junitxml=test-reports/PyDynamic.xml \
            PyDynamic/ > test-reports/PyDynamic.log
            pytest -v --junitxml=test-reports/agentMET4FOF.xml \
            --deselect agentMET4FOF/tests/test_examples.py::TestZEMA_EMC \
            agentMET4FOF/ > test-reports/agentMET4FOF.log

      #            --ignore=agentMET4FOF/tests/test_zema_emc_ml.py \
      # Store test results.
      - store_artifacts:
          path: test-reports
          destination: test-reports

      - store_test_results:
          path: test-reports

  build_and_test_venv_env:
    docker:
      - image: circleci/python:3

    working_directory: ~/repo

    steps:
      # Checkout code
      - checkout
      # Initialize submodules
      - run:
          name: Initialize submodules
          command: |
            git submodule sync PyDynamic agentMET4FOF
            git submodule update --init PyDynamic agentMET4FOF

      # Create folder for test results.
      - run:
          name: Create test result folder
          command: |
            mkdir test-reports

      # Download and cache dependencies
      - restore_cache:
          keys:
            # Specify the unique identifier for the cache.
            - vvenv-dependencies-{{ checksum "requirements.txt" }}
            # Fallback to using the latest cache if no exact match is found.
            - vvenv-dependencies-

      # Install dependencies.
      - run:
          name: Install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
            pip install pytest

      - save_cache:
          paths:
            - ./venv
          key: >-
            vvenv-dependencies-{{ checksum "requirements.txt" }}

      # Run tests! We use pytest's test-runner.
      - run:
          name: Run tests
          command: |
            . venv/bin/activate
            pytest -v --junitxml=test-reports/PyDynamic.xml \
            PyDynamic/ > test-reports/PyDynamic.log
            pytest -v --junitxml=test-reports/agentMET4FOF.xml \
            --deselect agentMET4FOF/tests/test_examples.py::TestZEMA_EMC \
            agentMET4FOF/ > test-reports/agentMET4FOF.log

      #            --ignore=agentMET4FOF/tests/test_zema_emc_ml.py \
      # Store test results.
      - store_artifacts:
          path: test-reports
          destination: test-reports

      - store_test_results:
          path: test-reports

  test_PyDynamic:
    executor: tester

    working_directory: ~/repo

    steps:
      # Checkout code
      - checkout
      # Update and initialize submodules
      - run: git submodule sync PyDynamic
      - run: git submodule update --init PyDynamic

      # Create folder for test results.
      - run:
          name: Create test result folder
          command: |
            mkdir test-reports

      # Download and cache dependencies
      - restore_cache:
          keys:
            # Specify the unique identifier for the cache in a multiline string,
            # where the second line will be separated by a space from the first.
            - v1-dependencies-{{ checksum "PyDynamic/requirements.txt" }}
            # Fallback to using the latest cache if no exact match is found.
            - v1-dependencies-

      # Install dependencies and Codecov reporter if necessary.
      - run:
          name: Install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r PyDynamic/requirements.txt
            pip install pytest pytest-cov

      - save_cache:
          paths:
            - ./venv
          key: >-
            v1-dependencies-{{ checksum "PyDynamic/requirements.txt" }}

      # Run tests with coverage report! We use pytest's test-runner.
      - run:
          name: Run PyDynamic tests
          command: |
            . venv/bin/activate
            pytest -v --junitxml=test-reports/pytest.xml \
            --cov-config=PyDynamic/.coveragerc --cov=PyDynamic/ \
            PyDynamic/ > test-reports/PyDynamic.log

      # Store test results.
      - store_artifacts:
          path: test-reports
          destination: test-reports/PyDynamic

      - store_test_results:
          path: test-reports

  test_agentMET4FOF:
    executor: tester

    working_directory: ~/repo

    steps:
      # Checkout code
      - checkout
      # Update and initialize submodules
      - run: git submodule sync agentMET4FOF
      - run: git submodule update --init agentMET4FOF

      # Create folder for test results.
      - run:
          name: Create test result folder
          command: |
            mkdir test-reports

      # Download and cache dependencies
      - restore_cache:
          keys:
            # Specify the unique identifier for the cache in a multiline string,
            # where the second line will be separated by a space from the first.
            - v1-dependencies-{{ checksum "agentMET4FOF/requirements.txt" }}
            # Fallback to using the latest cache if no exact match is found.
            - v1-dependencies-

      # Install dependencies and Codecov reporter if necessary.
      - run:
         name: Install dependencies
         command: |
           python3 -m venv venv
           . venv/bin/activate
           pip install -r agentMET4FOF/requirements.txt
           pip install pytest pytest-cov

      - save_cache:
          paths:
            - ./venv
          key: >-
            v1-dependencies-{{ checksum "agentMET4FOF/requirements.txt" }}

      # Run tests with coverage report! We use pytest's test-runner.
      - run:
          name: Run agentMET4FOF tests
          command: |
            . venv/bin/activate
            pytest -v --junitxml=test-reports/pytest.xml \
            --cov-config=.coveragerc --cov=agentMET4FOF/ \
            --deselect agentMET4FOF/tests/test_examples.py::TestZEMA_EMC \
            agentMET4FOF/ > test-reports/agentMET4FOF.log

      #            --ignore=agentMET4FOF/tests/test_zema_emc_ml.py \
      # Store test results.
      - store_artifacts:
         path: test-reports
         destination: test-reports/agentMET4FOF

      - store_test_results:
         path: test-reports
